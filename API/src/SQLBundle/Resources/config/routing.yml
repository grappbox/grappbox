# -----------------------------------------------------------------------
#                     FOR BETA ONLY
# -----------------------------------------------------------------------
user_passwordEncrypt:
  path:       user/passwordencrypt/{id}
  defaults:   { _controller:SQLBundle:User:passwordEncrypt, _format: json }
  methods:    [GET]


# -----------------------------------------------------------------------
#                     ACCOUNT ADMINISTRATION CONTROLLER
# -----------------------------------------------------------------------
accountAdministration_login:
  path:       account/login
  defaults:   { _controller: SQLBundle:AccountAdministration:login, _format: json }
  methods:    [POST]

accountAdministration_logout:
  path:       account/logout/{token}
  defaults:   { _controller:SQLBundle:AccountAdministration:logout, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
  methods:    [GET]

accountAdministration_register:
  path:       account/register
  defaults:   { _controller: SQLBundle:AccountAdministration:register, _format: json }
  methods:    [POST]

# accountAdministration_clientLogin:
#     path:       accountadministration/login/{token}
#     defaults:   { _controller: SQLBundle:AccountAdministration:clientLogin, _format: json }
#     methods:    [GET]




# -----------------------------------------------------------------------
#                           BUGTRACKER CONTROLLER
# -----------------------------------------------------------------------
bugtracker_getTicket:
  path:       bugtracker/ticket/{token}/{id}
  defaults:   { _controller: SQLBundle:Bugtracker:getTicket, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id:     \d+
  methods:  [GET]

bugtracker_postTicket:
  path:       bugtracker/ticket
  defaults:   { _controller: SQLBundle:Bugtracker:postTicket, _format: json }
  methods:  [POST]

bugtracker_editTicket:
  path:       bugtracker/ticket/{token}/{id}
  defaults:   { _controller: SQLBundle:Bugtracker:editTicket, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id:     \d+
  methods:  [PUT]

bugtracker_closeTicket:
  path:       bugtracker/ticket/close/{token}/{id}
  defaults:   { _controller: SQLBundle:Bugtracker:closeTicket, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id:     \d+
  methods:  [DELETE]

bugtracker_reopenTicket:
  path:       bugtracker/ticket/reopen/{token}/{id}
  defaults:   { _controller: SQLBundle:Bugtracker:reopenTicket, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id:     \d+
  methods:  [GET]

bugtracker_deleteTicket:
  path:       bugtracker/ticket/{token}/{id}
  defaults:   { _controller: SQLBundle:Bugtracker:deleteTicket, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id:     \d+
  methods:  [DELETE]

bugtracker_getTicket:
  path:       bugtracker/ticket/{token}/{id}
  defaults:   { _controller: SQLBundle:Bugtracker:getTicket, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id:     \d+
  methods:  [GET]

bugtracker_getTickets:
  path:       bugtracker/tickets/open/{token}/{id}
  defaults:   { _controller: SQLBundle:Bugtracker:getTickets, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id:     \d+
  methods:  [GET]

bugtracker_getClosedTickets:
  path:       bugtracker/tickets/close/{token}/{id}
  defaults:   { _controller: SQLBundle:Bugtracker:getClosedTickets, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id:     \d+
  methods:  [GET]

bugtracker_getLastTickets:
  path:       bugtracker/tickets/open/{token}/{id}/{offset}/{limit}
  defaults:   { _controller: SQLBundle:Bugtracker:getLastTickets, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id:     \d+
    offset: \d+
    limit:  \d+
  methods:  [GET]

bugtracker_getLastClosedTickets:
  path:       bugtracker/tickets/close/{token}/{id}/{offset}/{limit}
  defaults:   { _controller: SQLBundle:Bugtracker:getLastClosedTickets, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id:     \d+
    offset: \d+
    limit:  \d+
  methods:  [GET]

bugtracker_getTicketsByUser:
  path:       bugtracker/tickets/user/{token}/{id}/{userId}
  defaults:   { _controller: SQLBundle:Bugtracker:getTicketsByUser, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id:     \d+
    userId: \d+
  methods:  [GET]

bugtracker_setParticipants:
  path:       bugtracker/users/{token}/{id}
  defaults:   { _controller: SQLBundle:Bugtracker:setParticipants, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id:     \d+
  methods: [PUT]

bugtracker_getComments:
  path:       bugtracker/comments/{token}/{projectId}/{ticketId}
  defaults:   { _controller: SQLBundle:Bugtracker:getComments, _format: json }
  requirements:
    token:      "[a-zA-Z0-9]+"
    projectId:  \d+
    ticketId:   \d+
  methods:  [GET]

bugtracker_postComment:
    path:     bugtracker/comment
    defaults: { _controller: SQLBundle:Bugtracker:postComment, _format: json }
    methods:  [POST]

bugtracker_editComment:
  path:       bugtracker/comment/{token}/{id}
  defaults:   { _controller: SQLBundle:Bugtracker:editComment, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id:     \d+
  methods:  [PUT]

bugtracker_deleteComment:
  path:       bugtracker/comment/{token}/{id}
  defaults:   { _controller: SQLBundle:Bugtracker:deleteComment, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id:     \d+
  methods:  [DELETE]

bugtracker_tagCreation:
  path:       bugtracker/tag
  defaults:   { _controller: 'SQLBundle:Bugtracker:tagCreation', _format: json }
  methods: [POST]

bugtracker_tagUpdate:
  path:       bugtracker/tag/{token}/{id}
  defaults:   { _controller: 'SQLBundle:Bugtracker:tagUpdate', _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id:  \d+
  methods: [PUT]

bugtracker_getTagInfos:
  path:       bugtracker/tag/{token}/{id}
  defaults:   { _controller: 'SQLBundle:Bugtracker:getTagInfos', _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id:  \d+
  methods: [GET]

bugtracker_deleteTag:
  path:       bugtracker/tag/{token}/{id}
  defaults:   { _controller: 'SQLBundle:Bugtracker:deleteTag', _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id:  \d+
  methods: [DELETE]

bugtracker_assignTag:
  path:       bugtracker/tag/assign/{token}/{bugId}
  defaults:   { _controller: SQLBundle:Bugtracker:assignTag, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    bugId:  \d+
  methods: [PUT]

bugtracker_removeTag:
  path:       bugtracker/tag/remove/{token}/{bugId}/{tagId}
  defaults:   { _controller: 'SQLBundle:Bugtracker:removeTag', _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    bugId:  \d+
    tagId:  \d+
  methods: [DELETE]

bugtracker_getProjectTags:
  path:       bugtracker/project/tags/{token}/{projectId}
  defaults:   { _controller: 'SQLBundle:Bugtracker:getProjectTags', _format: json }
  requirements:
    token:      "[a-zA-Z0-9]+"
    projectId:  \d+
  methods: [GET]

# --------------------------------------------------------------------------------------------------
# TODO remove the two following request if no-one uses them, update creaotr/user fullname if they do
# --------------------------------------------------------------------------------------------------

bugtracker_getTicketsByState:
  path:       bugtracker/getticketsbystate/{token}/{id}/{state}/{offset}/{limit}
  defaults:   { _controller: SQLBundle:Bugtracker:getTicketsByState, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id:     \d+
    state:  \d+
    offset: \d+
    limit:  \d+
  methods:  [GET]

bugtracker_getStates:
  path:       bugtracker/getstates/{token}
  defaults:   { _controller: SQLBundle:Bugtracker:getStates, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
  methods:  [GET]



# -----------------------------------------------------------------------
#                           CLOUD CONTROLLER
# -----------------------------------------------------------------------
cloud_streamOpenAction:
  path:     cloud/stream/{token}/{idProject}/{safePassword}
  defaults:   { _controller: SQLBundle:Cloud:openStream, safePassword: null, _format: json }
  methods: [POST]

cloud_streamCloseAction:
  path:     cloud/stream/{token}/{projectId}/{streamId}
  defaults: { _controller: SQLBundle:Cloud:closeStream, _format: json }
  methods: [DELETE]

cloud_sendFile:
  path:     cloud/file
  defaults:   { _controller: SQLBundle:Cloud:sendFile , _format: json }
  methods: [PUT]

cloud_getList:
  path:       cloud/list/{token}/{idProject}/{path}/{password}
  defaults:   { _controller: SQLBundle:Cloud:getList,  password: null, _format: json }
  methods: [GET]

cloud_getFile:
  path:       cloud/file/{cloudPath}/{token}/{idProject}/{passwordSafe}
  defaults:   { _controller: SQLBundle:Cloud:getFile, passwordSafe: null }
  methods: [GET]

cloud_getFile_secured:
  path:       cloud/filesecured/{cloudPath}/{token}/{idProject}/{password}/{passwordSafe}
  defaults:   { _controller: SQLBundle:Cloud:getFileSecured, passwordSafe: null }
  methods: [GET]

cloud_setSafePass:
  path:       cloud/safepass
  defaults:   { _controller: SQLBundle:Cloud:setSafePass }
  methods: [PUT]

cloud_delete:
  path:       cloud/file/{token}/{projectId}/{path}/{password}
  defaults:   { _controller: SQLBundle:Cloud:del, password: null, _format: json }
  methods: [DELETE]

cloud_createDir:
  path:       cloud/createdir
  defaults:   { _controller: SQLBundle:Cloud:createDir, _format: json }
  methods: [POST]

cloud_delete_secured:
  path:       cloud/filesecured/{token}/{projectId}/{path}/{password}/{safe_password}
  defaults:   { _controller: SQLBundle:Cloud:delSecured, safe_password: null, _format: json }
  methods: [DELETE]

# cloud_createCloud: #TODO : Delete this route, it's a test route
#     path:       cloud/createcloud/{projectId}
#     defaults:   { _controller: SQLBundle:Cloud:createCloud }
#     methods: [GET]




# -----------------------------------------------------------------------
#                           DASHBOARD CONTROLLER
# -----------------------------------------------------------------------
dashboard_getTeamOccupation:
  path:       dashboard/occupation/{token}/{id}
  defaults:   { _controller: SQLBundle:Dashboard:getTeamOccupation, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id: \d+
  methods: [GET]

dashboard_getNextMeetings:
  path:       dashboard/meetings/{token}/{id}
  defaults:   { _controller: SQLBundle:Dashboard:getNextMeetings, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id:     \d+
  methods: [GET]

dashboard_getProjectsGlobalProgress:
    path:       dashboard/projects/{token}
    defaults:   { _controller: SQLBundle:Dashboard:getProjectsGlobalProgress, _format: json }
    requirements:
      token:  "[a-zA-Z0-9]+"
    methods: [GET]


# -----------------------------------------------------------------------
#                           EVENT CONTROLLER
# -----------------------------------------------------------------------

event_postEvent:
  path:       event
  defaults:   { _controller: SQLBundle:Event:postEvent, _format: json }
  methods: [POST]

event_editEvent:
  path:       event/{token}/{id}
  defaults:   { _controller: SQLBundle:Event:editEvent, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id:     \d+
  methods: [PUT]

event_delEvent:
  path:       event/{token}/{id}
  defaults:   { _controller: SQLBundle:Event:delEvent, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id:     \d+
  methods: [DELETE]

event_getEvent:
  path:       event/{token}/{id}
  defaults:   { _controller: SQLBundle:Event:getEvent, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id:     \d+
  methods: [GET]

event_setParticipants:
  path:       event/users/{token}/{id}
  defaults:   { _controller: SQLBundle:Event:setParticipants, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id:     \d+
  methods: [PUT]


# -----------------------------------------------------------------------
#                        NOTIFICATION CONTROLLER
# -----------------------------------------------------------------------
notification_registerDevice:
  path:       notification/device
  defaults:   { _controller: SQLBundle:Notification:registerDevice, _format: json }
  methods: [POST]

notification_unregisterDevice:
  path:       notification/device/{token}/{id}
  defaults:   { _controller: SQLBundle:Notification:unregisterDevice, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id:     \d+
  methods: [DELETE]

notification_getUserDevices:
  path:       /notification/devices/{token}
  defaults:   { _controller: SQLBundle:Notification:getUserDevices, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
  methods: [GET]

notification_getNotifications:
  path:		    /notification/{token}/{read}/{offset}/{limit}
  defaults:   { _controller: SQLBundle:Notification:getNotifications, _format: json }
  requirements:
    token:	"[a-zA-Z0-9]+"
    read:   "[a-zA-Z0-9]+"
    offset: \d+
    limit:  \d+
  methods: [GET]

notification_setNotificationToRead:
  path:       /notification/setnotificationtoread/{token}/{id}
  defaults:   { _controller: SQLBundle:Notification:setNotificationToRead, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id:     \d+
  methods: [PUT]


# -----------------------------------------------------------------------
#                           PLANNING CONTROLLER
# -----------------------------------------------------------------------
planning_getDayPlanning:
  path:       /planning/day/{token}/{date}
  defaults:   { _controller: SQLBundle:Planning:getDayPlanning, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    date:   \d+-\d+-\d+
  methods: [GET]

planning_getWeekPlanning:
  path:       /planning/week/{token}/{date}
  defaults:   { _controller: SQLBundle:Planning:getWeekPlanning, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    date:   \d+-\d+-\d+
  methods: [GET]

planning_getMonthPlanning:
  path:       /planning/month/{token}/{date}
  defaults:   { _controller: SQLBundle:Planning:getMonthPlanning, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    date:   \d+-\d+-\d+
  methods: [GET]




# -----------------------------------------------------------------------
#                           PROJECT CONTROLLER
# -----------------------------------------------------------------------
project_projectCreation:
  path:       project
  defaults:   { _controller: SQLBundle:Project:projectCreation, _format: json }
  methods: [POST]

project_updateInformations:
  path:       project/{token}/{id}
  defaults:   { _controller: SQLBundle:Project:updateInformations, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id:   \d+
  methods: [PUT]

project_getInformations:
  path:       project/{token}/{id}
  defaults:   { _controller: SQLBundle:Project:getInformations, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id: \d+
  methods: [GET]

project_delProject:
  path:       project/{token}/{id}
  defaults:   { _controller: SQLBundle:Project:delProject, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id: \d+
  methods: [DELETE]

project_retrieveProject:
  path:       project/retrieve/{token}/{projectId}
  defaults:   { _controller: SQLBundle:Project:retrieveProject, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    projectId: \d+
  methods: [GET]

project_generateCustomerAccess:
  path:       project/customeraccess
  defaults:   { _controller: SQLBundle:Project:generateCustomerAccess, _format: json }
  methods: [POST]

project_getCustomerAccessByProject:
  path:       project/customeraccesses/{token}/{projectId}
  defaults:   { _controller: SQLBundle:Project:getCustomerAccessByProject, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    projectId: \d+
  methods: [GET]

project_delCustomerAccess:
  path:       project/customeraccess/{token}/{projectId}/{customerAccessId}
  defaults:   { _controller: SQLBundle:Project:delCustomerAccess, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    projectId: \d+
    customerAccessId: \d+
  methods: [DELETE]

project_addUserToProject:
  path:       project/user
  defaults:   { _controller: SQLBundle:Project:addUserToProject, _format: json }
  methods: [POST]

project_removeUserConnected:
  path:       project/userconnected/{token}/{projectId}
  defaults:   { _controller: SQLBundle:Project:removeUserConnected, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    projectId: \d+
  methods: [DELETE]

project_removeUserToProject:
  path:       project/user/{token}/{projectId}/{userId}
  defaults:   { _controller: SQLBundle:Project:removeUserToProject, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    projectId: \d+
    userId: \d+
  methods: [DELETE]

project_getUserToProject:
  path:       project/users/{token}/{id}
  defaults:   { _controller: SQLBundle:Project:getUserToProject, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id: \d+
  methods: [GET]

project_changeProjectColor:
  path:       project/color/{token}/{id}
  defaults:   { _controller: 'SQLBundle:Project:changeProjectColor', _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id: \d+
  methods: [PUT]

project_resetProjectColor:
  path:       project/color/{token}/{id}
  defaults:   { _controller: 'SQLBundle:Project:resetProjectColor', _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id: \d+
  methods: [DELETE]

project_getProjectLogo:
  path:       project/logo/{token}/{id}
  defaults:   { _controller: 'SQLBundle:Project:getProjectLogo', _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id: \d+
  methods: [GET]



# -----------------------------------------------------------------------
#                           ROLE CONTROLLER
# -----------------------------------------------------------------------
role_addProjectRoles:
  path:       role
  defaults:   { _controller: SQLBundle:Role:addProjectRoles, _format: json }
  methods: [POST]

role_delProjectRoles:
  path:       role/{token}/{id}
  defaults:   { _controller: SQLBundle:Role:delProjectRoles, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id: \d+
  methods: [DELETE]

role_putProjectRoles:
  path:       role/{token}/{id}
  defaults:   { _controller: SQLBundle:Role:updateProjectRoles, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id: \d+
  methods: [PUT]

role_getProjectRoles:
  path:       roles/{token}/{projectId}
  defaults:   { _controller: SQLBundle:Role:getProjectRoles, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    projectId: \d+
  methods: [GET]

role_assignPersonToRole:
  path:       role/user
  defaults:   { _controller: SQLBundle:Role:assignPersonToRole, _format: json }
  methods: [POST]

role_updatePersonRole:
  path:       role/user/{token}/{userId}
  defaults:   { _controller: SQLBundle:Role:updatePersonRole, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    userId: \d+
  methods: [PUT]

role_getUserRoles:
  path:       roles/user/{token}
  defaults:   { _controller: SQLBundle:Role:getUserRoles, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
  methods: [GET]

role_delPersonRole:
  path:       role/user/{token}/{projectId}/{userId}/{roleId}
  defaults:   { _controller: SQLBundle:Role:delPersonRole, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    projectId: \d+
    userId: \d+
    roleId: \d+
  methods: [DELETE]

role_getRoleByProjectAndUser:
  path:       roles/project/user/{token}/{projectId}/{userId}
  defaults:   { _controller: SQLBundle:Role:getRoleByProjectAndUser, userId: 0, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    projectId: \d+
    userId: \d+
  methods: [GET]

role_getUsersForRole:
  path:       role/users/{token}/{roleId}
  defaults:   { _controller: SQLBundle:Role:getUsersForRole, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    roleId: \d+
  methods: [GET]

role_getUserRoleForPart:
  path:       role/user/part/{token}/{userId}/{projectId}/{part}
  defaults:   { _controller: SQLBundle:Role:getUserRoleForPart, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    userId:     \d+
    projectId:  \d+
  methods: [GET]



# -----------------------------------------------------------------------
#                          STATISTIC CONTROLLER
# -----------------------------------------------------------------------

stat_getAllStat:
  path:       statistics/{token}/{projectId}
  defaults:   { _controller: SQLBundle:Statistic:getAllStat, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    projectId: \d+
  methods: [GET]

stat_getStat:
  path:       statistic/{token}/{projectId}/{statName}
  defaults:   { _controller: SQLBundle:Statistic:getStat, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    projectId: \d+
  methods: [GET]

stat_weeklyUpdate:
  path:       statistics/update/weekly
  defaults:   { _controller: SQLBundle:Statistic:weeklyUpdate }
  methods: [GET]

stat_dailyUpdate:
  path:       statistics/update/daily
  defaults:   { _controller: SQLBundle:Statistic:dailyUpdate }
  methods: [GET]



# -----------------------------------------------------------------------
#                           TASK CONTROLLER
# -----------------------------------------------------------------------

task_taskCreation:
  path:       task
  defaults:   { _controller: SQLBundle:Task:createTask, _format: json }
  methods: [POST]

task_taskUpdate:
  path:       tasks/{token}/{id}
  defaults:   { _controller: SQLBundle:Task:updateTask, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id: \d+
  methods: [PUT]

task_getTaskInfos:
  path:       task/{token}/{taskId}
  defaults:   { _controller: SQLBundle:Task:getTaskInfos, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    taskId: \d+
  methods: [GET]

task_archiveTask:
  path:       task/archive/{token}/{id}
  defaults:   { _controller: SQLBundle:Task:archiveTask, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id: \d+
  methods: [PUT]

task_taskDelete:
  path:       task/{token}/{taskId}
  defaults:   { _controller: SQLBundle:Task:deleteTask, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    taskId: \d+
  methods: [DELETE]

task_tagCreation:
  path:       tasks/tag
  defaults:   { _controller: SQLBundle:Task:tagCreation, _format: json }
  methods: [POST]

task_tagUpdate:
  path:       tasks/{token}/{id}
  defaults:   { _controller: SQLBundle:Task:tagUpdate, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id: \d+
  methods: [PUT]

task_getTagInfos:
  path:       tasks/tag/{token}/{tagId}
  defaults:   { _controller: SQLBundle:Task:getTagInfos, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    tagId: \d+
  methods: [GET]

task_deleteTag:
  path:       tasks/tag/{token}/{tagId}
  defaults:   { _controller: SQLBundle:Task:deleteTag, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    tagId: \d+
  methods: [DELETE]

task_getProjectTasks:
  path:       tasks/project/{token}/{projectId}
  defaults:   { _controller: SQLBundle:Task:getProjectTasks, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    projectId: \d+
  methods: [GET]

task_getProjectTags:
  path:       tasks/tags/project/{token}/{projectId}
  defaults:   { _controller: SQLBundle:Task:getProjectTags, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    projectId: \d+
  methods: [GET]



# -----------------------------------------------------------------------
#                           TIMELINE CONTROLLER
# -----------------------------------------------------------------------
timeline_getTimelines:
  path:       timelines/{token}/{id}
  defaults:   { _controller: SQLBundle:Timeline:getTimelines, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id: \d+
  methods: [GET]

timeline_postMessage:
  path:       timeline/message/{id}
  defaults:   { _controller: SQLBundle:Timeline:postMessage, _format: json }
  requirements:
    id: \d+
  methods: [POST]

timeline_editMessage:
  path:       timeline/message/{token}/{id}/{messageId}
  defaults:   { _controller: SQLBundle:Timeline:editMessage, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id: \d+
    messageId: \d+
  methods: [PUT]

timeline_archiveMessage:
  path:       timeline/message/{token}/{id}/{messageId}
  defaults:   { _controller: SQLBundle:Timeline:archiveMessage, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id: \d+
    messageId: \d+
  methods: [DELETE]

timeline_getMessages:
  path:       timeline/messages/{token}/{id}
  defaults:   { _controller: SQLBundle:Timeline:getMessages, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id: \d+
  methods: [GET]

timeline_getLastMessages:
  path:       timeline/messages/{token}/{id}/{offset}/{limit}
  defaults:   { _controller: SQLBundle:Timeline:getLastMessages, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id: \d+
    offset: \d+
    limit: \d+
  methods: [GET]

timeline_getComments:
  path:       timeline/message/comments/{token}/{id}/{messageId}
  defaults:   { _controller: SQLBundle:Timeline:getComments, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id: \d+
    messageId: \d+
  methods: [GET]

timeline_postComment:
  path:       timeline/comment/{id}
  defaults:   { _controller: SQLBundle:Timeline:postComment, _format: json }
  requirements:
    id: \d+
  methods: [POST]

timeline_editComment:
  path:       timeline/comment/{id}
  defaults:   { _controller: SQLBundle:Timeline:editComment, _format: json }
  requirements:
    id: \d+
  methods: [PUT]

timeline_deleteComment:
  path:       timeline/comment/{token}/{id}
  defaults:   { _controller: SQLBundle:Timeline:deleteComment, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id: \d+
  methods: [DELETE]

# -----------------------------------------------------------------------
#                           USER CONTROLLER
# -----------------------------------------------------------------------
user_basicInformations:
  path:       user/{token}
  defaults:   { _controller: SQLBundle:User:basicInformations, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
  methods: [GET, PUT]

user_getUserBasicInformations:
  path:       user/{token}/{userId}
  defaults:   { _controller: SQLBundle:User:getUserBasicInformations, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    userId: \d+
  methods: [GET]

user_getIdByName:
  path:       user/id/{token}/{firstname}/{lastname}
  defaults:   { _controller: SQLBundle:User:getIdByName, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    userId: \d+
  methods: [GET]

user_getIdByEmail:
  path:       user/id/{token}/{email}
  defaults:   { _controller: SQLBundle:User:getIdByEmail, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
  methods: [GET]
    
user_getUserAvatar:
  path:       user/avatar/{token}/{userId}
  defaults:   { _controller: SQLBundle:User:getUserAvatar, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    userId: \d+
  methods: [GET]

user_getAllProjectUserAvatar:
  path:       user/project/avatars/{token}/{projectId}
  defaults:   { _controller: SQLBundle:User:getAllProjectUserAvatar, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    projectId: \d+
  methods: [GET]



# -----------------------------------------------------------------------
#                      VISUALISING PROJECT CONTROLLER
# -----------------------------------------------------------------------
# visualisingProject_addAction:
#     path:       /VisualisingProject/addAction/{id}
#     defaults:   { _controller: SQLBundle:VisualisingProject:addAction }
#     requirements:
#         id: \d+
#
# visualisingProject_addActor:
#     path:       /VisualisingProject/addActor/{id}
#     defaults:   { _controller: SQLBundle:VisualisingProject:addActor }
#     requirements:
#         id: \d+
#
# visualisingProject_addLink:
#     path:       /VisualisingProject/addLink/{id}
#     defaults:   { _controller: SQLBundle:VisualisingProject:addLink }
#     requirements:
#         id: \d+
#
# visualisingProject_newDiagram:
#     path:       /VisualisingProject/newDiagram/{id}
#     defaults:   { _controller: SQLBundle:VisualisingProject:newDiagram }
#     requirements:
#         id: \d+
#
# visualisingProject_openDiagram:
#     path:       /VisualisingProject/openDiagram/{id}
#     defaults:   { _controller: SQLBundle:VisualisingProject:openDiagram }
#     requirements:
#         id: \d+
#
# visualisingProject_invitePerson:
#     path:       /VisualisingProject/invitePerson/{id}
#     defaults:   { _controller: SQLBundle:VisualisingProject:invitePerson }
#     requirements:
#         id: \d+





# -----------------------------------------------------------------------
#                           WHITEBOARD CONTROLLER
# -----------------------------------------------------------------------
whiteboard_list:
  path:		whiteboards/{token}/{projectId}
  defaults:	{ _controller: SQLBundle:Whiteboard:listWhiteboard, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    userId: \d+projectId: \d+
  methods: [GET]

whiteboard_new:
  path:		whiteboard
  defaults:	{ _controller: SQLBundle:Whiteboard:newWhiteboard, _format: json }
  methods: [POST]

whiteboard_open:
  path:		whiteboard/{token}/{id}
  defaults:	{ _controller: SQLBundle:Whiteboard:openWhiteboard, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id: \d+
  methods: [GET]

whiteboard_pushDraw:
  path:		whiteboard/draw/{id}
  defaults:	{ _controller: SQLBundle:Whiteboard:pushDraw, _format: json }
  requirements:
    id: \d+
  methods: [PUT]

whiteboard_pullDraw:
  path:		whiteboard/draw/{id}
  defaults:	{ _controller: SQLBundle:Whiteboard:pullDraw, _format: json }
  requirements:
    id: \d+
  methods: [POST]

whiteboard_delete:
  path:		whiteboard/{token}/{id}
  defaults:	{ _controller: SQLBundle:Whiteboard:delWhiteboard, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id: \d+
  methods: [DELETE]

whiteboard_deleteObject:
  path:		whiteboard/object/{token}/{id}
  defaults:	{ _controller: SQLBundle:Whiteboard:deleteObject, _format: json }
  requirements:
    token:  "[a-zA-Z0-9]+"
    id: \d+
  methods: [DELETE]
