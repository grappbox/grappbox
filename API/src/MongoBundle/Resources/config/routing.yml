# -----------------------------------------------------------------------
#                     FOR BETA ONLY
# -----------------------------------------------------------------------
mongo_user_passwordEncrypt:
  path:       user/passwordencrypt/{id}
  defaults:   { _controller:MongoBundle:User:passwordEncrypt, _format: json }
  requirements:
  methods:    [GET]

mongo_accountAdministration_preorder:
  path:       account/preorder
  defaults:   { _controller: MongoBundle:AccountAdministration:preorder, _format: json }
  methods:    [POST]


# -----------------------------------------------------------------------
#                     ACCOUNT ADMINISTRATION CONTROLLER
# -----------------------------------------------------------------------
mongo_accountAdministration_login:
  path:       account/login
  defaults:   { _controller: MongoBundle:AccountAdministration:login, _format: json }
  methods:    [POST]

mongo_accountAdministration_logout:
  path:       account/logout
  defaults:   { _controller:MongoBundle:AccountAdministration:logout, _format: json }
  methods:    [GET]

mongo_accountAdministration_register:
  path:       account/register
  defaults:   { _controller: MongoBundle:AccountAdministration:register, _format: json }
  methods:    [POST]

# mongo_accountAdministration_clientLogin:
#     path:       accountadministration/login/{token}
#     defaults:   { _controller: MongoBundle:AccountAdministration:clientLogin }
#     methods:    [GET]




# -----------------------------------------------------------------------
#                           BUGTRACKER CONTROLLER
# -----------------------------------------------------------------------
mongo_bugtracker_postTicket:
  path:       bugtracker/ticket
  defaults:   { _controller: MongoBundle:Bugtracker:postTicket, _format: json }
  methods:  [POST]

mongo_bugtracker_editTicket:
  path:       bugtracker/ticket/{id}
  defaults:   { _controller: MongoBundle:Bugtracker:editTicket, _format: json }
  requirements:
  methods:  [PUT]

mongo_bugtracker_closeTicket:
  path:       bugtracker/ticket/close/{id}
  defaults:   { _controller: MongoBundle:Bugtracker:closeTicket, _format: json }
  requirements:
  methods:  [DELETE]

mongo_bugtracker_reopenTicket:
  path:       bugtracker/ticket/reopen/{id}
  defaults:   { _controller: MongoBundle:Bugtracker:reopenTicket, _format: json }
  requirements:
  methods:  [GET]

mongo_bugtracker_deleteTicket:
  path:       bugtracker/ticket/{id}
  defaults:   { _controller: MongoBundle:Bugtracker:deleteTicket, _format: json }
  requirements:
  methods:  [DELETE]

mongo_bugtracker_getTicket:
  path:       bugtracker/ticket/{id}
  defaults:   { _controller: MongoBundle:Bugtracker:getTicket, _format: json }
  requirements:
  methods:  [GET]

mongo_bugtracker_getTickets:
  path:       bugtracker/tickets/opened/{id}
  defaults:   { _controller: MongoBundle:Bugtracker:getTickets, _format: json }
  requirements:
  methods:  [GET]

mongo_bugtracker_getClosedTickets:
  path:       bugtracker/tickets/closed/{id}
  defaults:   { _controller: MongoBundle:Bugtracker:getClosedTickets, _format: json }
  requirements:
  methods:  [GET]

mongo_bugtracker_getLastTickets:
  path:       bugtracker/tickets/opened/{id}/{offset}/{limit}
  defaults:   { _controller: MongoBundle:Bugtracker:getLastTickets, _format: json }
  requirements:
    offset: \d+
    limit:  \d+
  methods:  [GET]

mongo_bugtracker_getLastClosedTickets:
  path:       bugtracker/tickets/closed/{id}/{offset}/{limit}
  defaults:   { _controller: MongoBundle:Bugtracker:getLastClosedTickets, _format: json }
  requirements:
    offset: \d+
    limit:  \d+
  methods:  [GET]

mongo_bugtracker_getTicketsByUser:
  path:       bugtracker/tickets/user/{id}/{userId}
  defaults:   { _controller: MongoBundle:Bugtracker:getTicketsByUser, _format: json }
  requirements:
  methods:  [GET]

mongo_bugtracker_setParticipants:
  path:       bugtracker/users/{id}
  defaults:   { _controller: MongoBundle:Bugtracker:setParticipants, _format: json }
  requirements:
  methods: [PUT]

mongo_bugtracker_getComments:
  path:       bugtracker/comments/{ticketId}
  defaults:   { _controller: MongoBundle:Bugtracker:getComments, _format: json }
  requirements:
  methods:  [GET]

mongo_bugtracker_postComment:
  path:     bugtracker/comment
  defaults: { _controller: MongoBundle:Bugtracker:postComment, _format: json }
  methods:  [POST]

mongo_bugtracker_editComment:
  path:       bugtracker/comment/{id}
  defaults:   { _controller: MongoBundle:Bugtracker:editComment, _format: json }
  requirements:
  methods:  [PUT]

mongo_bugtracker_deleteComment:
  path:       bugtracker/comment/{id}
  defaults:   { _controller: MongoBundle:Bugtracker:deleteComment, _format: json }
  requirements:
  methods:  [DELETE]

mongo_bugtracker_tagCreation:
  path:       bugtracker/tag
  defaults:   { _controller: MongoBundle:Bugtracker:tagCreation, _format: json }
  methods: [POST]

mongo_bugtracker_tagUpdate:
  path:       bugtracker/tag/{id}
  defaults:   { _controller: MongoBundle:Bugtracker:tagUpdate, _format: json }
  requirements:
  methods: [PUT]

mongo_bugtracker_getTagInfos:
  path:       bugtracker/tag/{id}
  defaults:   { _controller: MongoBundle:Bugtracker:getTagInfos, _format: json }
  requirements:
  methods: [GET]

mongo_bugtracker_deleteTag:
  path:       bugtracker/tag/{id}
  defaults:   { _controller: MongoBundle:Bugtracker:deleteTag, _format: json }
  requirements:
  methods: [DELETE]

mongo_bugtracker_assignTag:
  path:       bugtracker/tag/assign/{bugId}
  defaults:   { _controller: MongoBundle:Bugtracker:assignTag, _format: json }
  requirements:
  methods: [PUT]

mongo_bugtracker_removeTag:
  path:       bugtracker/tag/remove/{bugId}/{tagId}
  defaults:   { _controller: MongoBundle:Bugtracker:removeTag, _format: json }
  requirements:
  methods: [DELETE]

mongo_bugtracker_getProjectTags:
  path:       bugtracker/project/tags/{projectId}
  defaults:   { _controller: MongoBundle:Bugtracker:getProjectTags, _format: json }
  requirements:
  methods: [GET]



# -----------------------------------------------------------------------
#                           CLOUD CONTROLLER
# -----------------------------------------------------------------------
mongo_cloud_streamOpenAction:
  path:     cloud/stream/{idProject}/{safePassword}
  defaults:   { _controller: MongoBundle:Cloud:openStream, safePassword: null, _format: json }
  methods: [POST]

mongo_cloud_streamCloseAction:
  path:     cloud/stream/{projectId}/{streamId}
  defaults: { _controller: MongoBundle:Cloud:closeStream, _format: json }
  methods: [DELETE]

mongo_cloud_sendFile:
  path:     cloud/file
  defaults:   { _controller: MongoBundle:Cloud:sendFile , _format: json }
  methods: [PUT]

mongo_cloud_getList:
  path:       cloud/list/{idProject}/{path}/{password}
  defaults:   { _controller: MongoBundle:Cloud:getList,  password: null, _format: json }
  methods: [GET]

mongo_cloud_getFile:
  path:       cloud/file/{cloudPath}/{idProject}/{passwordSafe}
  defaults:   { _controller: MongoBundle:Cloud:getFile, passwordSafe: null }
  methods: [GET]

mongo_cloud_getFile_secured:
  path:       cloud/filesecured/{cloudPath}/{idProject}/{password}/{passwordSafe}
  defaults:   { _controller: MongoBundle:Cloud:getFileSecured, passwordSafe: null }
  methods: [GET]

mongo_cloud_setSafePass:
  path:       cloud/safepass
  defaults:   { _controller: MongoBundle:Cloud:setSafePass }
  methods: [PUT]

mongo_cloud_delete:
  path:       cloud/file/{projectId}/{path}/{password}
  defaults:   { _controller: MongoBundle:Cloud:del, password: null, _format: json }
  methods: [DELETE]

mongo_cloud_createDir:
  path:       cloud/createdir
  defaults:   { _controller: MongoBundle:Cloud:createDir, _format: json }
  methods: [POST]

mongo_cloud_delete_secured:
  path:       cloud/filesecured/{projectId}/{path}/{password}/{safe_password}
  defaults:   { _controller: MongoBundle:Cloud:delSecured, safe_password: null, _format: json }
  methods: [DELETE]

#     path:       cloud/createcloud/{projectId}
#     defaults:   { _controller: MongoBundle:Cloud:createCloud }
#     methods: [GET]




# -----------------------------------------------------------------------
#                           DASHBOARD CONTROLLER
# -----------------------------------------------------------------------
mongo_dashboard_getTeamOccupation:
  path:       dashboard/occupation/{id}
  defaults:   { _controller: MongoBundle:Dashboard:getTeamOccupation, _format: json }
  requirements:
  methods: [GET]

mongo_dashboard_getNextMeetings:
  path:       dashboard/meetings/{id}
  defaults:   { _controller: MongoBundle:Dashboard:getNextMeetings, _format: json }
  requirements:
  methods: [GET]

mongo_dashboard_getProjectsGlobalProgress:
  path:       dashboard/projects
  defaults:   { _controller: MongoBundle:Dashboard:getProjectsGlobalProgress, _format: json }
  methods: [GET]




# -----------------------------------------------------------------------
#                           EVENT CONTROLLER
# -----------------------------------------------------------------------
mongo_event_postEvent:
  path:       event
  defaults:   { _controller: MongoBundle:Event:postEvent, _format: json }
  methods: [POST]

mongo_event_editEvent:
  path:       event/{id}
  defaults:   { _controller: MongoBundle:Event:editEvent, _format: json }
  requirements:
  methods: [PUT]

mongo_event_delEvent:
  path:       event/{id}
  defaults:   { _controller: MongoBundle:Event:delEvent, _format: json }
  requirements:
  methods: [DELETE]

mongo_event_getEvent:
  path:       event/{id}
  defaults:   { _controller: MongoBundle:Event:getEvent, _format: json }
  requirements:
  methods: [GET]

mongo_event_setParticipants:
  path:       event/users/{id}
  defaults:   { _controller: MongoBundle:Event:setParticipants, _format: json }
  requirements:
  methods: [PUT]




# -----------------------------------------------------------------------
#                        NOTIFICATION CONTROLLER
# -----------------------------------------------------------------------
mongo_notification_registerDevice:
  path:       notification/device
  defaults:   { _controller: MongoBundle:Notification:registerDevice, _format: json }
  methods: [POST]

mongo_notification_getUserDevices:
  path:       /notification/devices
  defaults:   { _controller: MongoBundle:Notification:getUserDevices, _format: json }
  methods: [GET]

mongo_notification_getNotifications:
  path:		    /notification/{read}/{offset}/{limit}
  defaults:   { _controller: MongoBundle:Notification:getNotifications, _format: json }
  requirements:
    read:   "[a-zA-Z0-9]+"
    offset: \d+
    limit:  \d+
  methods: [GET]

mongo_notification_setNotificationToRead:
  path:       /notification/setnotificationtoread/{id}
  defaults:   { _controller: MongoBundle:Notification:setNotificationToRead, _format: json }
  requirements:
  methods: [PUT]


# -----------------------------------------------------------------------
#                           PLANNING CONTROLLER
# -----------------------------------------------------------------------
mongo_planning_getDayPlanning:
  path:       /planning/day/{date}
  defaults:   { _controller: MongoBundle:Planning:getDayPlanning, _format: json }
  requirements:
    date:   \d+-\d+-\d+
  methods: [GET]

mongo_planning_getWeekPlanning:
  path:       /planning/week/{date}
  defaults:   { _controller: MongoBundle:Planning:getWeekPlanning, _format: json }
  requirements:
    date:   \d+-\d+-\d+
  methods: [GET]

mongo_planning_getMonthPlanning:
  path:       /planning/month/{date}
  defaults:   { _controller: MongoBundle:Planning:getMonthPlanning, _format: json }
  requirements:
    date:   \d+-\d+-\d+
  methods: [GET]



# -----------------------------------------------------------------------
#                           PROJECT CONTROLLER
# -----------------------------------------------------------------------
mongo_project_projectCreation:
  path:       project
  defaults:   { _controller: MongoBundle:Project:projectCreation, _format: json }
  methods: [POST]

mongo_project_updateInformations:
  path:       project/{id}
  defaults:   { _controller: MongoBundle:Project:updateInformations, _format: json }
  requirements:
  methods: [PUT]

mongo_project_getInformations:
  path:       project/{id}
  defaults:   { _controller: MongoBundle:Project:getInformations, _format: json }
  requirements:
  methods: [GET]

mongo_project_delProject:
  path:       project/{id}
  defaults:   { _controller: MongoBundle:Project:delProject, _format: json }
  requirements:
  methods: [DELETE]

mongo_project_retrieveProject:
  path:       project/retrieve/{projectId}
  defaults:   { _controller: MongoBundle:Project:retrieveProject, _format: json }
  requirements:
  methods: [GET]

mongo_project_generateCustomerAccess:
  path:       project/customeraccess
  defaults:   { _controller: MongoBundle:Project:generateCustomerAccess, _format: json }
  methods: [POST]

mongo_project_getCustomerAccessByProject:
  path:       project/customeraccesses/{projectId}
  defaults:   { _controller: MongoBundle:Project:getCustomerAccessByProject, _format: json }
  requirements:
  methods: [GET]

mongo_project_delCustomerAccess:
  path:       project/customeraccess/{projectId}/{customerAccessId}
  defaults:   { _controller: MongoBundle:Project:delCustomerAccess, _format: json }
  requirements:
  methods: [DELETE]

mongo_project_addUserToProject:
  path:       project/user
  defaults:   { _controller: MongoBundle:Project:addUserToProject, _format: json }
  methods: [POST]

mongo_project_removeUserConnected:
  path:       project/userconnected/{projectId}
  defaults:   { _controller: MongoBundle:Project:removeUserConnected, _format: json }
  requirements:
  methods: [DELETE]

mongo_project_removeUserToProject:
  path:       project/user/{projectId}/{userId}
  defaults:   { _controller: MongoBundle:Project:removeUserToProject, _format: json }
  requirements:
  methods: [DELETE]

mongo_project_getUserToProject:
  path:       project/users/{id}
  defaults:   { _controller: MongoBundle:Project:getUserToProject, _format: json }
  requirements:
  methods: [GET]

mongo_project_changeProjectColor:
  path:       project/color/{id}
  defaults:   { _controller: MongoBundle:Project:changeProjectColor, _format: json }
  requirements:
  methods: [PUT]

mongo_project_resetProjectColor:
  path:       project/color/{id}
  defaults:   { _controller: MongoBundle:Project:resetProjectColor, _format: json }
  requirements:
  methods: [DELETE]

mongo_project_getProjectLogo:
  path:       project/logo/{id}
  defaults:   { _controller: MongoBundle:Project:getProjectLogo, _format: json }
  requirements:
  methods: [GET]



# -----------------------------------------------------------------------
#                           ROLE CONTROLLER
# -----------------------------------------------------------------------
mongo_role_addProjectRoles:
  path:       role
  defaults:   { _controller: MongoBundle:Role:addProjectRoles, _format: json }
  methods: [POST]

mongo_role_delProjectRoles:
  path:       role/{id}
  defaults:   { _controller: MongoBundle:Role:delProjectRoles, _format: json }
  requirements:
  methods: [DELETE]

mongo_role_putProjectRoles:
  path:       role/{id}
  defaults:   { _controller: MongoBundle:Role:updateProjectRoles, _format: json }
  requirements:
  methods: [PUT]

# mongo_role_getProjectRoles:
#   path:       roles/{projectId}
#   defaults:   { _controller: MongoBundle:Role:getProjectRoles, _format: json }
#   requirements:
#   methods: [GET]

mongo_role_assignPersonToRole:
  path:       role/user
  defaults:   { _controller: MongoBundle:Role:assignPersonToRole, _format: json }
  methods: [POST]

mongo_role_updatePersonRole:
  path:       role/user/{userId}
  defaults:   { _controller: MongoBundle:Role:updatePersonRole, _format: json }
  requirements:
  methods: [PUT]

mongo_role_getUserRoles:
  path:       roles/user
  defaults:   { _controller: MongoBundle:Role:getUserRoles, _format: json }
  methods: [GET]

mongo_role_getProjectRoles:
  path:       roles/{projectId}
  defaults:   { _controller: MongoBundle:Role:getProjectRoles, _format: json }
  requirements:
  methods: [GET]

mongo_role_delPersonRole:
  path:       role/user/{projectId}/{userId}/{roleId}
  defaults:   { _controller: MongoBundle:Role:delPersonRole, _format: json }
  requirements:
  methods: [DELETE]

mongo_role_getRoleByProjectAndUser:
  path:       roles/project/user/{projectId}/{userId}
  defaults:   { _controller: MongoBundle:Role:getRoleByProjectAndUser, userId: 0, _format: json }
  requirements:
  methods: [GET]

mongo_role_getUsersForRole:
  path:       role/users/{roleId}
  defaults:   { _controller: MongoBundle:Role:getUsersForRole, _format: json }
  requirements:
  methods: [GET]

mongo_role_getUserRoleForPart:
  path:       role/user/part/{userId}/{projectId}/{part}
  defaults:   { _controller: MongoBundle:Role:getUserRoleForPart, _format: json }
  requirements:
  methods: [GET]


# -----------------------------------------------------------------------
#                          STATISTIC CONTROLLER
# -----------------------------------------------------------------------

mongo_stat_customUpdate:
  path:       statistics/update/custom
  defaults:   { _controller: MongoBundle:Statistic:manuallyUpdateStat, _format: json }
  methods: [GET]

mongo_stat_weeklyUpdate:
  path:       statistics/update/weekly
  defaults:   { _controller: MongoBundle:Statistic:weeklyUpdate, _format: json }
  methods: [GET]

mongo_stat_dailyUpdate:
  path:       statistics/update/daily
  defaults:   { _controller: MongoBundle:Statistic:dailyUpdate, _format: json }
  methods: [GET]

mongo_stat_getAllStat:
  path:       statistics/{projectId}
  defaults:   { _controller: MongoBundle:Statistic:getAllStat }
  requirements:
  methods: [GET]

mongo_stat_getStat:
  path:       statistic/{projectId}/{statName}
  defaults:   { _controller: MongoBundle:Statistic:getStat, _format: json }
  requirements:
  methods: [GET]



# -----------------------------------------------------------------------
#                           TASK CONTROLLER
# -----------------------------------------------------------------------
mongo_task_taskCreation:
  path:       task
  defaults:   { _controller: MongoBundle:Task:createTask, _format: json }
  methods: [POST]

mongo_task_taskUpdate:
  path:       task/{id}
  defaults:   { _controller: MongoBundle:Task:updateTask, _format: json }
  requirements:
  methods: [PUT]

mongo_task_getTaskInfos:
  path:       task/{taskId}
  defaults:   { _controller: MongoBundle:Task:getTaskInfos, _format: json }
  requirements:
  methods: [GET]

mongo_task_archiveTask:
  path:       task/archive/{id}
  defaults:   { _controller: MongoBundle:Task:archiveTask, _format: json }
  requirements:
  methods: [PUT]

mongo_task_taskDelete:
  path:       task/{taskId}
  defaults:   { _controller: MongoBundle:Task:deleteTask, _format: json }
  requirements:
  methods: [DELETE]

mongo_task_tagCreation:
  path:       tasks/tag
  defaults:   { _controller: MongoBundle:Task:tagCreation, _format: json }
  methods: [POST]

mongo_task_tagUpdate:
  path:       tasks/tag/{id}
  defaults:   { _controller: MongoBundle:Task:tagUpdate, _format: json }
  requirements:
  methods: [PUT]

mongo_task_getTagInfos:
  path:       tasks/tag/{tagId}
  defaults:   { _controller: MongoBundle:Task:getTagInfos, _format: json }
  requirements:
  methods: [GET]

mongo_task_deleteTag:
  path:       tasks/tag/{tagId}
  defaults:   { _controller: MongoBundle:Task:deleteTag, _format: json }
  requirements:
  methods: [DELETE]

mongo_task_getProjectTasks:
  path:       tasks/project/{projectId}
  defaults:   { _controller: MongoBundle:Task:getProjectTasks, _format: json }
  requirements:
  methods: [GET]

mongo_task_getProjectTags:
  path:       tasks/tags/project/{projectId}
  defaults:   { _controller: MongoBundle:Task:getProjectTags, _format: json }
  requirements:
  methods: [GET]



# -----------------------------------------------------------------------
#                           TIMELINE CONTROLLER
# -----------------------------------------------------------------------
mongo_timeline_getTimelines:
  path:       timelines/{id}
  defaults:   { _controller: MongoBundle:Timeline:getTimelines, _format: json }
  requirements:
  methods: [GET]

mongo_timeline_postMessage:
  path:       timeline/message/{id}
  defaults:   { _controller: MongoBundle:Timeline:postMessage, _format: json }
  requirements:
  methods: [POST]

mongo_timeline_editMessage:
  path:       timeline/message/{id}/{messageId}
  defaults:   { _controller: MongoBundle:Timeline:editMessage, _format: json }
  requirements:
  methods: [PUT]

mongo_timeline_archiveMessage:
  path:       timeline/message/{id}/{messageId}
  defaults:   { _controller: MongoBundle:Timeline:archiveMessage, _format: json }
  requirements:
  methods: [DELETE]

mongo_timeline_getMessages:
  path:       timeline/messages/{id}
  defaults:   { _controller: MongoBundle:Timeline:getMessages, _format: json }
  requirements:
  methods: [GET]

mongo_timeline_getLastMessages:
  path:       timeline/messages/{id}/{offset}/{limit}
  defaults:   { _controller: MongoBundle:Timeline:getLastMessages, _format: json }
  requirements:
  requirements:
    offset: \d+
    limit: \d+
  methods: [GET]

mongo_timeline_getComments:
  path:       timeline/message/comments/{id}/{messageId}
  defaults:   { _controller: MongoBundle:Timeline:getComments, _format: json }
  requirements:
  methods: [GET]

mongo_timeline_postComment:
  path:       timeline/comment/{id}
  defaults:   { _controller: MongoBundle:Timeline:postComment, _format: json }
  requirements:
  methods: [POST]

mongo_timeline_editComment:
  path:       timeline/comment/{id}
  defaults:   { _controller: MongoBundle:Timeline:editComment, _format: json }
  requirements:
  methods: [PUT]

mongo_timeline_deleteComment:
  path:       timeline/comment/{id}
  defaults:   { _controller: MongoBundle:Timeline:deleteComment, _format: json }
  requirements:
  methods: [DELETE]




# -----------------------------------------------------------------------
#                           USER CONTROLLER
# -----------------------------------------------------------------------
mongo_user_basicInformations:
  path:       user
  defaults:   { _controller: MongoBundle:User:basicInformations, _format: json }
  methods: [GET, PUT]

mongo_user_getUserBasicInformations:
  path:       user/{userId}
  defaults:   { _controller: MongoBundle:User:getUserBasicInformations, _format: json }
  requirements:
  methods: [GET]

mongo_user_getIdByName:
  path:       user/id/{firstname}/{lastname}
  defaults:   { _controller: MongoBundle:User:getIdByName, _format: json }
  requirements:
  methods: [GET]

mongo_user_getIdByEmail:
  path:       user/id/{email}
  defaults:   { _controller: MongoBundle:User:getIdByEmail, _format: json }
  requirements:
  methods: [GET]

mongo_user_getUserAvatar:
  path:       user/avatar/{userId}
  defaults:   { _controller: MongoBundle:User:getUserAvatar, _format: json }
  requirements:
  methods: [GET]

mongo_user_getAllProjectUserAvatar:
  path:       user/project/avatars/{projectId}
  defaults:   { _controller: MongoBundle:User:getAllProjectUserAvatar, _format: json }
  requirements:
  methods: [GET]




# -----------------------------------------------------------------------
#                           WHITEBOARD CONTROLLER
# -----------------------------------------------------------------------
mongo_whiteboard_list:
  path:		whiteboards/{projectId}
  defaults:	{ _controller: MongoBundle:Whiteboard:listWhiteboard, _format: json }
  requirements:
  methods: [GET]

mongo_whiteboard_new:
  path:		whiteboard
  defaults:	{ _controller: MongoBundle:Whiteboard:newWhiteboard, _format: json }
  methods: [POST]

mongo_whiteboard_open:
  path:		whiteboard/{id}
  defaults:	{ _controller: MongoBundle:Whiteboard:openWhiteboard, _format: json }
  requirements:
  methods: [GET]

mongo_whiteboard_close:
  path:   whiteboard/{id}
  defaults: { _controller: MongoBundle:Whiteboard:closeWhiteboard, _format: json }
  requirements:
  methods: [PUT]

mongo_whiteboard_pushDraw:
  path:		whiteboard/draw/{id}
  defaults:	{ _controller: MongoBundle:Whiteboard:pushDraw, _format: json }
  requirements:
  methods: [PUT]

mongo_whiteboard_pullDraw:
  path:		whiteboard/draw/{id}
  defaults:	{ _controller: MongoBundle:Whiteboard:pullDraw, _format: json }
  requirements:
  methods: [POST]

mongo_whiteboard_delete:
  path:		whiteboard/{id}
  defaults:	{ _controller: MongoBundle:Whiteboard:delWhiteboard, _format: json }
  requirements:
  methods: [DELETE]

mongo_whiteboard_deleteObject:
  path:		whiteboard/object/{id}
  defaults:	{ _controller: MongoBundle:Whiteboard:deleteObject, _format: json }
  requirements:
  methods: [DELETE]
