<?php

namespace MongoBundle\Document;

use Doctrine\ODM\MongoDB\DocumentRepository;
use Symfony\Component\HttpFoundation\JsonResponse;

/**
 * ProjectRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProjectRepository extends DocumentRepository
{
	public function findTeamOccupation($projectId)
	{
		$qb = $this->createQueryBuilder()->field('id')->equals($projectId);

		$projects = $qb->getQuery()->execute();

		$defaultDate = date_create("0000-00-00 00:00:00");

		$resp = new JsonResponse();
		$ret = array();
		$arr = array();

		if ($projects === null || count($projects) == 0)
		{
			$ret["info"] = array("return_code" => "1.2.3", "return_message" => "Dashboard - getteamoccupation - No Data Success");
			$ret["data"] = array("array" => []);
			$resp->setStatusCode(JsonResponse::HTTP_OK);
			$resp->setData($ret);

			return $resp;
		}

		foreach ($projects as $project)
		{
			$projectUsers = $project->getUsers();
			$projectId = $project->getId();
			foreach ($projectUsers as $user) {
				$id = $user->getId();
				$firstName = $user->getFirstname();
				$lastName = $user->getLastname();
				$tasks = $user->getRessources();
				$nbOfOngoingTasks = 0;
				$nbOfTasksBegun = 0;
				$busy = false;

				foreach ($tasks as $task) {
					$task = $task->getTask();
					if ($task->getProjects()->getId() == $projectId)
					{
						if ($task->getFinishedAt() == $defaultDate)
						{
							$busy = true;
							$nbOfOngoingTasks++;
						}
						if ($task->getStartedAt() != $defaultDate)
							$nbOfTasksBegun++;
					}
				}
				if ($busy == true)
				{
					$arr[] = array("user" => array("id" => $id, "firstname" => $firstName, "lastname" => $lastName),
										"occupation" => "busy", "number_of_tasks_begun" => $nbOfTasksBegun, "number_of_ongoing_tasks" => $nbOfOngoingTasks);
				}
				else
				{
					$arr[] = array("user" => array("id" => $id, "firstname" => $firstName, "lastname" => $lastName),
								"occupation" => "free", "number_of_tasks_begun" => $nbOfTasksBegun, "number_of_ongoing_tasks" => $nbOfOngoingTasks);
				}
			}
		}

		$ret["info"] = array("return_code" => "1.2.1", "return_message" => "Dashboard - getteamoccupation - Complete success");
		$ret["data"] = array("array" => $arr);
		$resp->setStatusCode(JsonResponse::HTTP_OK);
		$resp->setData($ret);

		return $resp;
	}

	public function findProjectGlobalProgress($id)
	{
		$qb = $this->createQueryBuilder()->field('users.id')->equals($id);

		$projects = $qb->getQuery()->execute();

		$arr = array();
		$i = 0;
		$defaultDate = date_create("0000-00-00 00:00:00");

		$resp = new JsonResponse();
		$ret = array();

		if ($projects === null || count($projects) == 0)
		{
			$ret["info"] = array("return_code" => "1.2.3", "return_message" => "Dashboard - getProjectsGlobalProgress - No Data Success");
			$ret["data"] = array("array" => []);
			$resp->setStatusCode(JsonResponse::HTTP_OK);
			$resp->setData($ret);

			return $resp;
		}


		foreach ($projects as $project) {
			$projectId = $project->getId();
			$projectName = $project->getName();
			$projectDescription = $project->getDescription();
			$phone = $project->getPhone();
			$company = $project->getCompany();
			$projectLogo = $project->getLogoDate();
			if ($projectLogo != null)
				$projectLogo = $projectLogo->format('Y-m-d H:i:s');
			$contactMail = $project->getContactEmail();
			$facebook = $project->getFacebook();
			$twitter = $project->getTwitter();
			$createdAt = $project->getCreatedAt();
			if ($createdAt != null)
				$createdAt = $createdAt->format('Y-m-d H:i:s');
			$deletedAt = $project->getDeletedAt();
			if ($deletedAt != null)
				$deletedAt = $deletedAt->format('Y-m-d H:i:s');
			$tasks = $project->getTasks();
			$bugs = $project->getBugs();
			$timelines = $project->getTimelines();
			$nbTasks = 0;
			$nbFinishedTasks = 0;
			$nbOngoingTasks = 0;
			$nbBugs = 0;
			$nbMessages = 0;

			foreach ($tasks as $task) {
				$nbTasks++;
				if ($task->getFinishedAt() != $defaultDate)
				{
					$nbFinishedTasks++;
				}
				else
				{
					$nbOngoingTasks++;
				}
			}

			foreach ($bugs as $bug) {
				if ($bug->getState() == true)
				{
					$nbBugs++;
				}
			}

			foreach ($timelines as $timeline) {
				foreach ($timeline->getTimelineMessages() as $message) {
					$nbMessages++;
				}
			}

			$arr[] = array("id" => $projectId, "name" => $projectName, "description" => $projectDescription , "logo" => $projectLogo, "phone" => $phone, "company" => $company, "contact_mail" => $contactMail,
				"facebook" => $facebook, "twitter" => $twitter, "color" => $project->getColor(), "created_at" => $createdAt, "deleted_at" => $deletedAt, "number_finished_tasks" => $nbFinishedTasks,
				"number_ongoing_tasks" => $nbOngoingTasks, "number_tasks" => $nbTasks, "number_bugs" => $nbBugs, "number_messages" => $nbMessages);

			$i++;
		}

		$ret["info"] = array("return_code" => "1.2.1", "return_message" => "Dashboard - getProjectsGlobalProgress - Complete success");
		$ret["data"] = array("array" => $arr);
		$resp->setStatusCode(JsonResponse::HTTP_OK);
		$resp->setData($ret);

		return $resp;
	}

	public function findUserProjectsV2($id, $code, $part, $function)
	{
		$qb = $this->createQueryBuilder();
		$projects = $qb->getQuery()->execute();

		$resp = new JsonResponse();
		$ret = array();
		$arr = array();

		if ($projects === null)
		{
			$ret["info"] = array("return_code" => "1.".$code.".3", "return_message" => $part." - ".$function." - No Data Success");
			$ret["data"] = array("array" => []);
			$resp->setStatusCode(JsonResponse::HTTP_OK);
			$resp->setData($ret);

			return $resp;
		}

		$arr = array();

		foreach ($projects as $project) {
			$creatorId = $project->getCreatorUser()->getId();

			if ($creatorId == $id)
			{
				$arr[] = $project->objectToArray();
			}
			else
			{
				$projectUsers = $project->getUsers();

				foreach ($projectUsers as $projectUser) {
					$userId = $projectUser->getId();

					if ($userId == $id)
					{
						$arr[] = $project->objectToArray();
					}
				}
			}
		}

		if (count($arr) == 0 || count($projects) == 0)
		{
			$ret["info"] = array("return_code" => "1.".$code.".3", "return_message" => $part." - ".$function." projects + arr - No Data Success");
			$ret["data"] = array("array" => []);
			$resp->setStatusCode(JsonResponse::HTTP_PARTIAL_CONTENT);
			$resp->setData($ret);

			return $resp;
		}

		$ret["info"] = array("return_code" => "1.".$code.".1", "return_message" => $part." - ".$function." - Complete success");
		$ret["data"] = array("array" => $arr);
		$resp->setStatusCode(JsonResponse::HTTP_OK);
		$resp->setData($ret);

		return ($resp);
	}
}
