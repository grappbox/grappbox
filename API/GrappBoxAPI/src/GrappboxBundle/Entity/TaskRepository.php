<?php

namespace GrappboxBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * TaskRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TaskRepository extends EntityRepository
{
	public function findUserAllTasks($id)
	{
		$qb = $this->createQueryBuilder('t')->join('t.users', 'u')->where('u.id = :id')->setParameter('id', $id);

		$tasks = $qb->getQuery()->getResult();

		if ($tasks === null)
		{
			throw new NotFoundHttpException("No tasks for the user with id ".$id);
		}

		$arr = array();
		$i = 1;

		if (count($tasks) == 0)
		{
			return (Object)$arr;
		}

		foreach ($tasks as $task) {
			$project = $task->getProjects();

			$projectId = $project->getId();
			$projectName = $project->getName();
			$taskId = $task->getId();
			$taskTitle = $task->getTitle();
			$description = $task->getDescription();
			$dueDate = $task->getDueDate();
			$startedAt = $task->getStartedAt();
			$finishedAt = $task->getFinishedAt();
			$createdAt = $task->getCreatedAt();

			$arr["Task ".$i] = array("id" => $taskId, "title" => $taskTitle, "description" => $description, "project_id" => $projectId, "project_name" => $projectName,
				"due_date" => $dueDate, "started_at" => $startedAt, "finished_at" => $finishedAt, "created_at" => $createdAt);
			$i++;
		}

		return $arr;
	}

	public function findUserCurrentAndNextTasks($id)
	{
		$qb = $this->createQueryBuilder('t')->join('t.users', 'u')->where('u.id = :id')->setParameter('id', $id);

		$tasks = $qb->getQuery()->getResult();

		if ($tasks === null)
		{
			throw new NotFoundHttpException("No tasks for the user with id ".$id);
		}

		$arr = array();
		$i = 1;
		$defaultDate = date_create("0000-00-00 00:00:00");

		if (count($tasks) == 0)
		{
			return (Object)$arr;
		}

		foreach ($tasks as $task) {
			$finishedAt = $task->getFinishedAt();

			if ($finishedAt == $defaultDate)
			{
				$project = $task->getProjects();
				$projectId = $project->getId();
				$projectName = $project->getName();
				$taskId = $task->getId();
				$taskTitle = $task->getTitle();
				$description = $task->getDescription();
				$dueDate = $task->getDueDate();
				$startedAt = $task->getStartedAt();
				$createdAt = $task->getCreatedAt();

				$arr["Task ".$i] = array("id" => $taskId, "title" => $taskTitle, "description" => $description, "project_id" => $projectId, "project_name" => $projectName,
					"due_date" => $dueDate, "started_at" => $startedAt, "finished_at" => $finishedAt, "created_at" => $createdAt);
				$i++;
			}
		}

		return $arr;
	}
}
