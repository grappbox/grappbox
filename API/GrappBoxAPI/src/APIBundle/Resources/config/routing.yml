project_projectCreation:
    path:       projects/projectCreation/{token}
    defaults:   { _controller: APIBundle:Project:projectCreation }
    methods: [POST]

role_addProjectRoles:
    path:       roles/addprojectroles
    defaults:   { _controller: APIBundle:RolesAndTokenVerification:addProjectRoles }
    methods: [POST]

role_delProjectRoles:
    path:       roles/delprojectroles
    defaults:   { _controller: APIBundle:RolesAndTokenVerification:delProjectRoles }
    methods: [DELETE]

role_putProjectRoles:
    path:       roles/putprojectroles
    defaults:   { _controller: APIBundle:RolesAndTokenVerification:updateProjectRoles }
    methods: [PUT]

role_getProjectRoles:
    path:       roles/getprojectroles/{token}/{projectId}
    defaults:   { _controller: APIBundle:RolesAndTokenVerification:getProjectRoles }
    requirements:
        projectId: \d+
    methods: [GET]

role_assignPersonToRole:
    path:       roles/assignpersontorole
    defaults:   { _controller: APIBundle:RolesAndTokenVerification:assignPersonToRole }
    methods: [POST]

role_updatePersonRole:
    path:       roles/putpersonrole
    defaults:   { _controller: APIBundle:RolesAndTokenVerification:updatePersonRole }
    methods: [PUT]

role_delPersonRole:
    path:       roles/delpersonrole
    defaults:   { _controller: APIBundle:RolesAndTokenVerification:delPersonRole }
    methods: [DELETE]


user_basicInformations:
    path:       user/basicinformations/{token}
    defaults:   { _controller: APIBundle:User:basicInformations }
    methods: [GET, PUT]

user_getIdByName:
    path:       user/getidbyname/{token}/{firstname}/{lastname}
    defaults:   { _controller: APIBundle:User:getIdByName }
    methods: [GET]

user_getNextMeetings:
    path:       user/getnextmeetings/{token}
    defaults:   { _controller: APIBundle:User:getNextMeetings }
    methods: [GET]

user_getProjects:
    path:       user/getprojects/{token}
    defaults:   { _controller: APIBundle:User:getProjects }
    methods: [GET]

user_getAllTasks:
    path:       user/getalltasks/{token}
    defaults:   { _controller: APIBundle:User:getAllTasks }
    methods: [GET]

user_getCurrentAndNextTasks:
    path:       user/getcurrentandnexttasks/{token}
    defaults:   { _controller: APIBundle:User:getCurrentAndNextTasks }
    methods: [GET]



whiteboard_list:
    path:		whiteboard/list/{token}/{projectId}
    defaults:	{ _controller: APIBundle:Whiteboard:listWhiteboard }
    requirements:
        projectId: \d+
    methods: [GET]

whiteboard_new:
    path:		whiteboard/new
    defaults:	{ _controller: APIBundle:Whiteboard:newWhiteboard }
    methods: [POST]

whiteboard_open:
    path:		whiteboard/open/{token}/{id}
    defaults:	{ _controller: APIBundle:Whiteboard:openWhiteboard }
    requirements:
        id: \d+
    methods: [GET]

whiteboard_pushDraw:
    path:		whiteboard/pushdraw/{id}
    defaults:	{ _controller: APIBundle:Whiteboard:pushDraw }
    requirements:
        id: \d+
    methods: [POST]

whiteboard_pullDraw:
    path:		whiteboard/pulldraw/{id}
    defaults:	{ _controller: APIBundle:Whiteboard:pullDraw }
    requirements:
        id: \d+
    methods: [POST]

# whiteboard_exit:
#     path:		/Whiteboard/exit/{id}
#     defaults:	{ _controller: APIBundle:Whiteboard:exitWhiteboard }
#     requirements:
#         id: \d+

whiteboard_delete:
    path:		whiteboard/delete/{token}/{id}
    defaults:	{ _controller: APIBundle:Whiteboard:delWhiteboard }
    requirements:
        id: \d+
    methods: [DELETE]



dashboard_getTeamOccupation:
    path:       dashboard/getteamoccupation/{token}
    defaults:   { _controller: APIBundle:Dashboard:getTeamOccupation }
    methods: [GET]

dashboard_getNextMeetings:
    path:       dashboard/getnextmeetings/{token}
    defaults:   { _controller: APIBundle:Dashboard:getNextMeetings }
    methods: [GET]

dashboard_getProjectsGlobalProgress:
    path:       dashboard/getprojectsglobalprogress/{token}
    defaults:   { _controller: APIBundle:Dashboard:getProjectsGlobalProgress }
    requirements:
        id: \d+
    methods: [GET]

dashboard_getProjectCreator:
    path:       dashboard/getprojectcreator/{token}/{id}
    defaults:   { _controller: APIBundle:Dashboard:getProjectCreator }
    requirements:
        id: \d+
    methods: [GET]

dashboard_getProjectBasicInformations:
    path:       dashboard/getprojectbasicinformations/{token}/{id}
    defaults:   { _controller: APIBundle:Dashboard:getProjectBasicInformations }
    requirements:
        id: \d+
    methods: [GET]

dashboard_getProjectTasks:
    path:       dashboard/getprojecttasks/{token}/{id}
    defaults:   { _controller: APIBundle:Dashboard:getProjectTasks }
    requirements:
        id: \d+
    methods: [GET]

dashboard_getUserBasicInformations:
    path:       dashboard/getuserbasicinformations/{token}
    defaults:   { _controller: APIBundle:Dashboard:getUserBasicInformations }
    methods: [GET]

dashboard_getProjectPersons:
    path:       dashboard/getprojectpersons/{token}/{id}
    defaults:   { _controller: APIBundle:Dashboard:getProjectPersons }
    requirements:
        id: \d+
    methods: [GET]

dashboard_getMeetingBasicInformations:
    path:       dashboard/getmeetingbasicinformations/{token}/{id}
    defaults:   { _controller: APIBundle:Dashboard:getMeetingBasicInformations }
    requirements:
        id: \d+
    methods: [GET]

dashboard_getProjectList:
    path:       dashboard/getprojectlist/{token}
    defaults:   { _controller: APIBundle:Dashboard:getProjectList }
    methods: [GET]

dashboard_getProjectTasksStatus:
    path:       dashboard/getprojecttasksstatus/{token}/{id}
    defaults:   { _controller: APIBundle:Dashboard:getProjectTasksStatus }
    requirements:
        id: \d+
    methods: [GET]

dashboard_getNumberTimelineMessages:
    path:       dashboard/getnumbertimelinemessages/{token}/{id}
    defaults:   { _controller: APIBundle:Dashboard:getNumberTimelineMessages }
    requirements:
        id: \d+
    methods: [GET]

dashboard_getNumberBugs:
    path:       dashboard/getnumberbugs/{token}/{id}
    defaults:   { _controller: APIBundle:Dashboard:getNumberBugs }
    requirements:
        id: \d+
    methods: [GET]



accountAdministration_login:
    path:       accountadministration/login
    defaults:   { _controller: APIBundle:AccountAdministration:login }
    methods:    [POST]

accountAdministration_clientLogin:
    path:       accountadministration/login/{token}
    defaults:   { _controller: APIBundle:AccountAdministration:clientLogin }
    methods:    [GET]

accountAdministration_logout:
    path:       accountadministration/logout/{token}
    defaults:   { _controller:APIBundle:AccountAdministration:logout}
    methods:    [GET]

accountAdministration_register:
    path:       accountadministration/register
    defaults:   { _controller: APIBundle:AccountAdministration:register }
    methods:    [POST]



cloud_streamActions:
  path:     cloud/stream
  defaults:   { _controller: APIBundle:Cloud:stream, _format: json}
  methods: [POST, DELETE]

cloud_sendFile:
  path:     cloud/sendfile
  defaults:   { _controller: APIBundle:Cloud:sendFile , _format: json}
  methods: [PUT]

cloud_getList:
    path:       cloud/getlist/{token}/{idProject}/{path}/{password}
    defaults:   { _controller: APIBundle:Cloud:getList,  password: null, _format: json}
    methods: [GET]

cloud_getFile:
    path:       cloud/getfile/{cloudPath}/{token}/{idProject}/{password}/{passwordSafe}
    defaults:   { _controller: APIBundle:Cloud:getFile, password: null, passwordSafe: null }
    methods: [GET]

cloud_setSafePass:
    path:       cloud/setsafepass
    defaults:   { _controller: APIBundle:Cloud:setSafePass }
    methods: [POST]

cloud_delete:
    path:       cloud/del
    defaults:   { _controller: APIBundle:Cloud:del , _format: json}
    methods: [DELETE]

cloud_createDir:
    path:       cloud/createdir
    defaults:   { _controller: APIBundle:Cloud:createDir, _format: json }
    methods: [POST]

cloud_createCloud: #TODO : Delete this route, it's a test route
    path:       cloud/createcloud/{projectId}
    defaults:   { _controller: APIBundle:Cloud:createCloud }
    methods: [GET]



timeline_getTimelineType:
    path:       /timeline/gettimelinetype/{token}/{id}
    defaults:   { _controller: APIBundle:Timeline:getTimelineType }
    requirements:
        id: \d+
    methods: [GET]

timeline_postMessage:
    path:       /timeline/postmessage/{id}
    defaults:   { _controller: APIBundle:Timeline:postMessage }
    requirements:
        id: \d+
    methods: [POST]

timeline_editMessage:
    path:       /timeline/editmessage/{id}
    defaults:   { _controller: APIBundle:Timeline:editMessage }
    requirements:
        id: \d+
    methods: [POST]

timeline_getMessages:
    path:       /timeline/getmessages/{token}/{id}
    defaults:   { _controller: APIBundle:Timeline:getMessages }
    requirements:
        id: \d+
    methods: [GET]

timeline_archiveMessage:
    path:       /timeline/archivemessage/{token}/{id}/{messageId}
    defaults:   { _controller: APIBundle:Timeline:archiveMessage }
    requirements:
        id: \d+
    methods: [GET]


bugtracker_postTicket:
    path:       /Bugtracker/postTicket
    defaults:   { _controller: APIBundle:Bugtracker:postTicket }

bugtracker_modifyTicket:
    path:       /Bugtracker/modifyTicket/{id}
    defaults:   { _controller: APIBundle:Bugtracker:modifyTicket }
    requirements:
        id: \d+

bugtracker_getTicketList:
    path:       /Bugtracker/getTicketList/{id}
    defaults:   { _controller: APIBundle:Bugtracker:getTicketList }
    requirements:
        id: \d+

bugtracker_commentTicket:
    path:       /Bugtracker/commentTicket/{id}
    defaults:   { _controller: APIBundle:Bugtracker:commentTicket }
    requirements:
        id: \d+

bugtracker_closeTicket:
    path:       /Bugtracker/closeTicket/{id}
    defaults:   { _controller: APIBundle:Bugtracker:closeTicket }
    requirements:
        id: \d+

bugtracker_getTicketDetails:
    path:       /Bugtracker/getTicketDetails/{id}
    defaults:   { _controller: APIBundle:Bugtracker:getTicketDetails }
    requirements:
        id: \d+



planning_getDayPlanning:
    path:       /Planning/getDayPlanning
    defaults:   { _controller: APIBundle:Planning:getDayPlanning }

planning_getWeekPlanning:
    path:       /Planning/getWeekPlanning
    defaults:   { _controller: APIBundle:Planning:getWeekPlanning }

planning_getMonthPlanning:
    path:       /Planning/getMonthPlanning
    defaults:   { _controller: APIBundle:Planning:getMonthPlanning }

planning_modifyEvent:
    path:       /Planning/modifyEvent
    defaults:   { _controller: APIBundle:Planning:modifyEvent }

planning_getEventDetails:
    path:       /Planning/getEventDetails/{id}
    defaults:   { _controller: APIBundle:Planning:getEventDetails }
    requirements:
        id: \d+



projectSettings_addTeamMember:
    path:       /ProjectSettings/addTeamMember/{id}
    defaults:   { _controller: APIBundle:ProjectSettings:addTeamMember }
    requirements:
        id: \d+

projectSettings_generateClientAccess:
    path:       /ProjectSettings/generateClientAccess/{id}
    defaults:   { _controller: APIBundle:ProjectSettings:generateClientAccess }
    requirements:
        id: \d+

projectSettings_delTeamMember:
    path:       /ProjectSettings/delTeamMember/{id}
    defaults:   { _controller: APIBundle:ProjectSettings:delTeamMember }
    requirements:
        id: \d+

projectSettings_assignRole:
    path:       /ProjectSettings/assignRole/{id}
    defaults:   { _controller: APIBundle:ProjectSettings:assignRole }
    requirements:
        id: \d+

projectSettings_editRole:
    path:       /ProjectSettings/editRole/{id}
    defaults:   { _controller: APIBundle:ProjectSettings:editRole }
    requirements:
        id: \d+

projectSettings_getRoles:
    path:       /ProjectSettings/getRoles/{id}
    defaults:   { _controller: APIBundle:ProjectSettings:getRoles }
    requirements:
        id: \d+

projectSettings_checkPermissions:
    path:       /ProjectSettings/checkPermissions/{id}
    defaults:   { _controller: APIBundle:ProjectSettings:checkPermissions }
    requirements:
        id: \d+

projectSettings_createProject:
    path:       /ProjectSettings/createProject
    defaults:   { _controller: APIBundle:ProjectSettings:createProject }

projectSettings_archiveProject:
    path:       /ProjectSettings/archiveProject/{id}
    defaults:   { _controller: APIBundle:ProjectSettings:archiveProject }
    requirements:
        id: \d+

projectSettings_setProjectFinished:
    path:       /ProjectSettings/setProjectFinished/{id}
    defaults:   { _controller: APIBundle:ProjectSettings:setProjectFinished }
    requirements:
        id: \d+



visualisingProject_addAction:
    path:       /VisualisingProject/addAction/{id}
    defaults:   { _controller: APIBundle:VisualisingProject:addAction }
    requirements:
        id: \d+

visualisingProject_addActor:
    path:       /VisualisingProject/addActor/{id}
    defaults:   { _controller: APIBundle:VisualisingProject:addActor }
    requirements:
        id: \d+

visualisingProject_addLink:
    path:       /VisualisingProject/addLink/{id}
    defaults:   { _controller: APIBundle:VisualisingProject:addLink }
    requirements:
        id: \d+

visualisingProject_newDiagram:
    path:       /VisualisingProject/newDiagram/{id}
    defaults:   { _controller: APIBundle:VisualisingProject:newDiagram }
    requirements:
        id: \d+

visualisingProject_openDiagram:
    path:       /VisualisingProject/openDiagram/{id}
    defaults:   { _controller: APIBundle:VisualisingProject:openDiagram }
    requirements:
        id: \d+

visualisingProject_invitePerson:
    path:       /VisualisingProject/invitePerson/{id}
    defaults:   { _controller: APIBundle:VisualisingProject:invitePerson }
    requirements:
        id: \d+



meeting_editMeeting:
    path:       /Meeting/editMeeting/{id}
    defaults:   { _controller: APIBundle:Meeting:editMeeting }
    requirements:
        id: \d+

meeting_delMeeting:
    path:       /Meeting/delMeeting/{id}
    defaults:   { _controller: APIBundle:Meeting:delMeeting }
    requirements:
        id: \d+

meeting_invitePersonToMeeting:
    path:       /Meeting/invitePersonToMeeting/{id}
    defaults:   { _controller: APIBundle:Meeting:invitePersonToMeeting }
    requirements:
        id: \d+

meeting_addAlert:
    path:       /Meeting/addAlert/{id}
    defaults:   { _controller: APIBundle:Meeting:addAlert }
    requirements:
        id: \d+



personnalSettings_editPhoto:
    path:       /PersonnalSettings/editPhoto/{id}
    defaults:   { _controller: APIBundle:PersonnalSettings:editPhoto }
    requirements:
        id: \d+

personnalSettings_editPersonalInfos:
    path:       /PersonnalSettings/editPersonalInfos/{id}
    defaults:   { _controller: APIBundle:PersonnalSettings:editPersonalInfos }
    requirements:
        id: \d+

personnalSettings_changePassword:
    path:       /PersonnalSettings/changePassword/{id}
    defaults:   { _controller: APIBundle:PersonnalSettings:changePassword }
    requirements:
        id: \d+

personnalSettings_editPreferences:
    path:       /PersonnalSettings/editPreferences/{id}
    defaults:   { _controller: APIBundle:PersonnalSettings:editPreferences }
    requirements:
        id: \d+

personnalSettings_getRole:
    path:       /PersonnalSettings/getRole/{id}
    defaults:   { _controller: APIBundle:PersonnalSettings:getRole }
    requirements:
        id: \d+



gantt_addTask:
    path:       /Gantt/addTask/{id}
    defaults:   { _controller: APIBundle:Gantt:addTask }
    requirements:
        id: \d+

gantt_assignTask:
    path:       /Gantt/assignTask/{id}
    defaults:   { _controller: APIBundle:Gantt:assignTask }
    requirements:
        id: \d+

gantt_editTask:
    path:       /Gantt/editTask/{id}
    defaults:   { _controller: APIBundle:Gantt:editTask }
    requirements:
        id: \d+

gantt_delTask:
    path:       /Gantt/delTask/{id}
    defaults:   { _controller: APIBundle:Gantt:delTask }
    requirements:
        id: \d+

gantt_setTaskProperties:
    path:       /Gantt/setTaskProperties/{id}
    defaults:   { _controller: APIBundle:Gantt:setTaskProperties }
    requirements:
        id: \d+
